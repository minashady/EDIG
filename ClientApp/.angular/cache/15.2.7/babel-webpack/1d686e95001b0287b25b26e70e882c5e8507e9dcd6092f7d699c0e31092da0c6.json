{"ast":null,"code":"import * as signalR from '@aspnet/signalr';\nimport { Subject } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nexport class WebSocketService {\n  constructor() {\n    this.hubConnection = new signalR.HubConnectionBuilder().withUrl('ws://localhost:7272/priceUpdateHub').build();\n    this.subject = new Subject();\n    this.hubConnection.start().then(() => {\n      this.hubConnection.on('ReceiveUpdate', (symbol, price) => {\n        const update = {\n          symbol,\n          price\n        };\n        this.subject.next(update);\n      });\n    });\n  }\n  getMessages() {\n    return this.subject.asObservable();\n  }\n}\nWebSocketService.ɵfac = function WebSocketService_Factory(t) {\n  return new (t || WebSocketService)();\n};\nWebSocketService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: WebSocketService,\n  factory: WebSocketService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AACA,OAAO,KAAKA,OAAO,MAAM,iBAAiB;AAC1C,SAASC,OAAO,QAAoB,MAAM;;AAM1C,OAAM,MAAOC,gBAAgB;EAI3BC;IACE,IAAI,CAACC,aAAa,GAAG,IAAIJ,OAAO,CAACK,oBAAoB,EAAE,CACpDC,OAAO,CAAC,oCAAoC,CAAC,CAC7CC,KAAK,EAAE;IAEV,IAAI,CAACC,OAAO,GAAG,IAAIP,OAAO,EAAe;IAEzC,IAAI,CAACG,aAAa,CAACK,KAAK,EAAE,CAACC,IAAI,CAAC,MAAK;MACnC,IAAI,CAACN,aAAa,CAACO,EAAE,CAAC,eAAe,EAAE,CAACC,MAAc,EAAEC,KAAa,KAAI;QACvE,MAAMC,MAAM,GAAgB;UAAEF,MAAM;UAAEC;QAAK,CAAE;QAC7C,IAAI,CAACL,OAAO,CAACO,IAAI,CAACD,MAAM,CAAC;MAC3B,CAAC,CAAC;IACJ,CAAC,CAAC;EACJ;EAEAE,WAAW;IACT,OAAO,IAAI,CAACR,OAAO,CAACS,YAAY,EAAE;EACpC;;AArBWf,gBAAgB;mBAAhBA,gBAAgB;AAAA;AAAhBA,gBAAgB;SAAhBA,gBAAgB;EAAAgB,SAAhBhB,gBAAgB;EAAAiB,YAFf;AAAM","names":["signalR","Subject","WebSocketService","constructor","hubConnection","HubConnectionBuilder","withUrl","build","subject","start","then","on","symbol","price","update","next","getMessages","asObservable","factory","providedIn"],"sourceRoot":"","sources":["W:\\97_Applying\\EDIG\\Stock_Exchange\\Stock_Exchange\\ClientApp\\Services\\webSocket.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport * as signalR from '@aspnet/signalr'; \r\nimport { Subject, Observable } from 'rxjs';\r\nimport { StockUpdate } from '../src/app/stocks/stocks.component';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class WebSocketService {\r\n  private hubConnection: signalR.HubConnection;\r\n  private subject: Subject<StockUpdate>;\r\n\r\n  constructor() {\r\n    this.hubConnection = new signalR.HubConnectionBuilder()\r\n      .withUrl('ws://localhost:7272/priceUpdateHub')\r\n      .build();\r\n\r\n    this.subject = new Subject<StockUpdate>();\r\n\r\n    this.hubConnection.start().then(() => {\r\n      this.hubConnection.on('ReceiveUpdate', (symbol: string, price: number) => {\r\n        const update: StockUpdate = { symbol, price };\r\n        this.subject.next(update);\r\n      });\r\n    });\r\n  }\r\n\r\n  getMessages(): Observable<StockUpdate> {\r\n    return this.subject.asObservable();\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}