{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { HttpHeaders } from '@angular/common/http';\nimport { catchError, throwError } from 'rxjs';\nlet StocksComponent = class StocksComponent {\n  constructor(fb, http, webSocketService) {\n    this.fb = fb;\n    this.http = http;\n    this.webSocketService = webSocketService;\n    this.isModalOpen = false;\n    this.isModalHistoryOpen = false;\n    this.stocks = [];\n    this.orders = [];\n    this.form = this.fb.group({\n      stockSymbol: [''],\n      orderType: [''],\n      quantity: ['']\n    });\n  }\n  openModal() {\n    this.isModalOpen = true;\n  }\n  closeModal() {\n    this.isModalOpen = false;\n  }\n  openHistoryModal() {\n    const headers = new HttpHeaders().set('X-Api-Key', 'EDIG_Assessment');\n    this.http.get('http://localhost:7272/order', {\n      headers\n    }).subscribe(data => {\n      this.orders = data;\n    });\n    this.isModalHistoryOpen = true;\n  }\n  closeHistoryModal() {\n    this.isModalHistoryOpen = false;\n  }\n  ngOnInit() {\n    this.getStocks();\n  }\n  getStocks() {\n    const headers = new HttpHeaders().set('X-Api-Key', 'EDIG_Assessment');\n    this.http.get('http://localhost:7272/stocks', {\n      headers\n    }).subscribe(data => {\n      this.stocks = data;\n    });\n    this.webSocketService.getMessages().pipe(catchError(err => {\n      console.error('Error in subscribe:', err);\n      return throwError(err);\n    })).subscribe(PriceUpdate => {\n      console.log(\"frontend updating\");\n      // Find the stock that was updated\n      const stock = this.stocks.find(s => s.symbol === PriceUpdate.symbol);\n      if (stock) {\n        // Get the previous price from PriceHistories\n        const previousPrice = stock.priceHistories[stock.priceHistories.length - 1].price;\n        // Update the current price\n        stock.currentPrice = PriceUpdate.price;\n        // Add the new price to PriceHistories\n        stock.priceHistories.push({\n          price: PriceUpdate.price,\n          timeStamp: new Date().toISOString()\n        });\n        stock.isPriceRecentlyUpdated = true;\n        setTimeout(() => {\n          stock.isPriceRecentlyUpdated = false;\n        }, 3000);\n      }\n    });\n  }\n  placeOrder() {\n    const headers = new HttpHeaders().set('X-Api-Key', 'EDIG_Assessment');\n    const order = {\n      Symbol: this.form.get('stockSymbol')?.value,\n      Type: this.form.get('orderType')?.value,\n      Quantity: this.form.get('quantity')?.value,\n      TimeStamp: new Date().toISOString()\n    };\n    this.http.post('http://localhost:7272/order', order, {\n      headers\n    }).subscribe(response => {\n      console.log(response);\n    });\n    this.closeModal();\n  }\n};\nStocksComponent = __decorate([Component({\n  selector: 'app-stocks',\n  templateUrl: './stocks.component.html',\n  styleUrls: ['./stocks.component.css']\n})], StocksComponent);\nexport { StocksComponent };","map":{"version":3,"mappings":"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","names":["Component","HttpHeaders","catchError","throwError","StocksComponent","constructor","fb","http","webSocketService","stocks","orders","form","group","stockSymbol","orderType","quantity","openModal","isModalOpen","closeModal","openHistoryModal","headers","set","get","subscribe","data","isModalHistoryOpen","closeHistoryModal","ngOnInit","getStocks","getMessages","pipe","err","console","error","PriceUpdate","log","stock","find","s","symbol","previousPrice","priceHistories","length","price","currentPrice","push","timeStamp","Date","toISOString","isPriceRecentlyUpdated","setTimeout","placeOrder","order","Symbol","value","Type","Quantity","TimeStamp","post","response","selector","templateUrl","styleUrls"],"sourceRoot":"","sources":["W:\\97_Applying\\EDIG\\Stock_Exchange\\Stock_Exchange\\ClientApp\\src\\app\\stocks\\stocks.component.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { HttpHeaders } from '@angular/common/http';\r\nimport { WebSocketService } from '../../../Services/webSocket.service';\r\nimport { catchError, throwError } from 'rxjs';\r\nimport { ReactiveFormsModule,FormBuilder, FormGroup } from '@angular/forms';\r\n\r\n\r\n\r\n@Component({\r\n  selector: 'app-stocks',\r\n  templateUrl: './stocks.component.html',\r\n  styleUrls: ['./stocks.component.css']\r\n})\r\nexport class StocksComponent implements OnInit {\r\n  stocks: StocksDetails[];\r\n  orders: OrdersDetails[];\r\n  form: FormGroup;\r\n  isModalOpen = false;\r\n  isModalHistoryOpen = false;\r\n \r\n\r\n  constructor(private fb: FormBuilder, private http: HttpClient, private webSocketService: WebSocketService) { // Inject WebSocketService\r\n    this.stocks = [];\r\n    this.orders = [];\r\n    this.form = this.fb.group({\r\n      stockSymbol: [''],\r\n      orderType: [''],\r\n      quantity: ['']\r\n    });\r\n  }\r\n  openModal() {\r\n    this.isModalOpen = true;\r\n  }\r\n\r\n  closeModal() {\r\n    this.isModalOpen = false;\r\n  }\r\n  openHistoryModal() {\r\n    const headers = new HttpHeaders().set('X-Api-Key', 'EDIG_Assessment');\r\n    this.http.get<OrdersDetails[]>('http://localhost:7272/order', { headers }).subscribe(data => {\r\n      this.orders = data;\r\n    });\r\n\r\n    this.isModalHistoryOpen = true;\r\n  }\r\n\r\n  closeHistoryModal() {\r\n    this.isModalHistoryOpen = false;\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.getStocks();\r\n  }\r\n\r\n  getStocks() {\r\n    const headers = new HttpHeaders().set('X-Api-Key', 'EDIG_Assessment');\r\n\r\n    this.http.get<StocksDetails[]>('http://localhost:7272/stocks', { headers }).subscribe(data => {\r\n      this.stocks = data;\r\n    });\r\n\r\n    this.webSocketService.getMessages().pipe(\r\n      catchError(err => {\r\n        console.error('Error in subscribe:', err);\r\n        return throwError(err);\r\n      })\r\n    ).subscribe((PriceUpdate: StockUpdate) => { // Specify the type of update\r\n      console.log(\"frontend updating\");\r\n      // Find the stock that was updated\r\n      const stock = this.stocks.find(s => s.symbol === PriceUpdate.symbol);\r\n\r\n      if (stock) {\r\n        // Get the previous price from PriceHistories\r\n        const previousPrice = stock.priceHistories[stock.priceHistories.length - 1].price;\r\n\r\n        // Update the current price\r\n        stock.currentPrice = PriceUpdate.price;\r\n\r\n        // Add the new price to PriceHistories\r\n        stock.priceHistories.push({ price: PriceUpdate.price, timeStamp: new Date().toISOString() });\r\n\r\n        stock.isPriceRecentlyUpdated = true;\r\n        setTimeout(() => {\r\n          stock.isPriceRecentlyUpdated = false;\r\n        }, 3000);\r\n      }\r\n    });\r\n  }\r\n  placeOrder() {\r\n    const headers = new HttpHeaders().set('X-Api-Key', 'EDIG_Assessment');\r\n    const order = {\r\n      Symbol: this.form.get('stockSymbol')?.value,\r\n      Type: this.form.get('orderType')?.value,\r\n      Quantity: this.form.get('quantity')?.value,\r\n      TimeStamp: new Date().toISOString()\r\n    };\r\n\r\n    this.http.post('http://localhost:7272/order', order, { headers }).subscribe(response => {\r\n      console.log(response);\r\n    });\r\n    this.closeModal();\r\n  }\r\n\r\n}\r\n\r\nexport interface StocksDetails {\r\n  title: string,\r\n  symbol: string,\r\n  currentPrice: number,\r\n  priceHistories: PriceHistory[]\r\n  isPriceRecentlyUpdated?: boolean;\r\n}\r\nexport interface OrdersDetails {\r\n  symbol: string,\r\n  type: string,\r\n  quantity: number,\r\n  timeStamp: string\r\n}\r\n\r\n\r\nexport interface PriceHistory {\r\n  price: number,\r\n  timeStamp: string\r\n}\r\nexport interface StockUpdate {\r\n  symbol: string;\r\n  price: number;\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}