{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { HttpHeaders } from '@angular/common/http';\nimport { catchError, throwError } from 'rxjs';\nlet StocksComponent = class StocksComponent {\n  constructor(fb, http, webSocketService) {\n    this.fb = fb;\n    this.http = http;\n    this.webSocketService = webSocketService;\n    this.stocks = [];\n    this.form = this.fb.group({\n      stockSymbol: [''],\n      orderType: [''],\n      quantity: ['']\n    });\n  }\n  ngOnInit() {\n    this.getStocks();\n  }\n  getStocks() {\n    const headers = new HttpHeaders().set('X-Api-Key', 'EDIG_Assessment');\n    this.http.get('http://localhost:7272/stocks', {\n      headers\n    }).subscribe(data => {\n      this.stocks = data;\n    });\n    this.webSocketService.getMessages().pipe(catchError(err => {\n      console.error('Error in subscribe:', err);\n      return throwError(err);\n    })).subscribe(PriceUpdate => {\n      console.log(\"frontend updating\");\n      // Find the stock that was updated\n      const stock = this.stocks.find(s => s.symbol === PriceUpdate.symbol);\n      if (stock) {\n        // Get the previous price from PriceHistories\n        const previousPrice = stock.priceHistories[stock.priceHistories.length - 1].price;\n        // Update the current price\n        stock.currentPrice = PriceUpdate.price;\n        // Add the new price to PriceHistories\n        stock.priceHistories.push({\n          price: PriceUpdate.price,\n          timeStamp: new Date().toISOString()\n        });\n      }\n    });\n  }\n  placeOrder() {\n    const order = {\n      Symbol: this.form.get('stockSymbol').value,\n      Type: this.form.get('orderType').value,\n      Quantity: this.form.get('quantity').value\n    };\n    this.http.post('http://localhost:7272/order', order).subscribe(response => {\n      console.log(response);\n    });\n  }\n};\nStocksComponent = __decorate([Component({\n  selector: 'app-stocks',\n  templateUrl: './stocks.component.html',\n  styleUrls: ['./stocks.component.css']\n})], StocksComponent);\nexport { StocksComponent };","map":{"version":3,"mappings":";AAAA,SAASA,SAAS,QAAgB,eAAe;AAEjD,SAASC,WAAW,QAAQ,sBAAsB;AAElD,SAASC,UAAU,EAAEC,UAAU,QAAQ,MAAM;AAStC,IAAMC,eAAe,GAArB,MAAMA,eAAe;EAI1BC,YAAoBC,EAAe,EAAUC,IAAgB,EAAUC,gBAAkC;IAArF,OAAE,GAAFF,EAAE;IAAuB,SAAI,GAAJC,IAAI;IAAsB,qBAAgB,GAAhBC,gBAAgB;IACrF,IAAI,CAACC,MAAM,GAAG,EAAE;IAChB,IAAI,CAACC,IAAI,GAAG,IAAI,CAACJ,EAAE,CAACK,KAAK,CAAC;MACxBC,WAAW,EAAE,CAAC,EAAE,CAAC;MACjBC,SAAS,EAAE,CAAC,EAAE,CAAC;MACfC,QAAQ,EAAE,CAAC,EAAE;KACd,CAAC;EACJ;EAEAC,QAAQ;IACN,IAAI,CAACC,SAAS,EAAE;EAClB;EAEAA,SAAS;IACP,MAAMC,OAAO,GAAG,IAAIhB,WAAW,EAAE,CAACiB,GAAG,CAAC,WAAW,EAAE,iBAAiB,CAAC;IAErE,IAAI,CAACX,IAAI,CAACY,GAAG,CAAkB,8BAA8B,EAAE;MAAEF;IAAO,CAAE,CAAC,CAACG,SAAS,CAACC,IAAI,IAAG;MAC3F,IAAI,CAACZ,MAAM,GAAGY,IAAI;IACpB,CAAC,CAAC;IAEF,IAAI,CAACb,gBAAgB,CAACc,WAAW,EAAE,CAACC,IAAI,CACtCrB,UAAU,CAACsB,GAAG,IAAG;MACfC,OAAO,CAACC,KAAK,CAAC,qBAAqB,EAAEF,GAAG,CAAC;MACzC,OAAOrB,UAAU,CAACqB,GAAG,CAAC;IACxB,CAAC,CAAC,CACH,CAACJ,SAAS,CAAEO,WAAwB,IAAI;MACvCF,OAAO,CAACG,GAAG,CAAC,mBAAmB,CAAC;MAChC;MACA,MAAMC,KAAK,GAAG,IAAI,CAACpB,MAAM,CAACqB,IAAI,CAACC,CAAC,IAAIA,CAAC,CAACC,MAAM,KAAKL,WAAW,CAACK,MAAM,CAAC;MAEpE,IAAIH,KAAK,EAAE;QACT;QACA,MAAMI,aAAa,GAAGJ,KAAK,CAACK,cAAc,CAACL,KAAK,CAACK,cAAc,CAACC,MAAM,GAAG,CAAC,CAAC,CAACC,KAAK;QAEjF;QACAP,KAAK,CAACQ,YAAY,GAAGV,WAAW,CAACS,KAAK;QAEtC;QACAP,KAAK,CAACK,cAAc,CAACI,IAAI,CAAC;UAAEF,KAAK,EAAET,WAAW,CAACS,KAAK;UAAEG,SAAS,EAAE,IAAIC,IAAI,EAAE,CAACC,WAAW;QAAE,CAAE,CAAC;;IAEhG,CAAC,CAAC;EACJ;EACAC,UAAU;IACR,MAAMC,KAAK,GAAG;MACZC,MAAM,EAAE,IAAI,CAAClC,IAAI,CAACS,GAAG,CAAC,aAAa,CAAC,CAAC0B,KAAK;MAC1CC,IAAI,EAAE,IAAI,CAACpC,IAAI,CAACS,GAAG,CAAC,WAAW,CAAC,CAAC0B,KAAK;MACtCE,QAAQ,EAAE,IAAI,CAACrC,IAAI,CAACS,GAAG,CAAC,UAAU,CAAC,CAAC0B;KACrC;IAED,IAAI,CAACtC,IAAI,CAACyC,IAAI,CAAC,6BAA6B,EAAEL,KAAK,CAAC,CAACvB,SAAS,CAAC6B,QAAQ,IAAG;MACxExB,OAAO,CAACG,GAAG,CAACqB,QAAQ,CAAC;IACvB,CAAC,CAAC;EACJ;CAED;AA1DY7C,eAAe,eAL3BJ,SAAS,CAAC;EACTkD,QAAQ,EAAE,YAAY;EACtBC,WAAW,EAAE,yBAAyB;EACtCC,SAAS,EAAE,CAAC,wBAAwB;CACrC,CAAC,GACWhD,eAAe,CA0D3B;SA1DYA,eAAe","names":["Component","HttpHeaders","catchError","throwError","StocksComponent","constructor","fb","http","webSocketService","stocks","form","group","stockSymbol","orderType","quantity","ngOnInit","getStocks","headers","set","get","subscribe","data","getMessages","pipe","err","console","error","PriceUpdate","log","stock","find","s","symbol","previousPrice","priceHistories","length","price","currentPrice","push","timeStamp","Date","toISOString","placeOrder","order","Symbol","value","Type","Quantity","post","response","selector","templateUrl","styleUrls"],"sourceRoot":"","sources":["W:\\97_Applying\\EDIG\\Stock_Exchange\\Stock_Exchange\\ClientApp\\src\\app\\stocks\\stocks.component.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { HttpHeaders } from '@angular/common/http';\r\nimport { WebSocketService } from '../../../Services/webSocket.service';\r\nimport { catchError, throwError } from 'rxjs';\r\nimport { FormBuilder, FormGroup } from '@angular/forms';\r\n\r\n\r\n@Component({\r\n  selector: 'app-stocks',\r\n  templateUrl: './stocks.component.html',\r\n  styleUrls: ['./stocks.component.css']\r\n})\r\nexport class StocksComponent implements OnInit {\r\n  stocks: StocksDetails[];\r\n  form: FormGroup;\r\n\r\n  constructor(private fb: FormBuilder, private http: HttpClient, private webSocketService: WebSocketService) { // Inject WebSocketService\r\n    this.stocks = [];\r\n    this.form = this.fb.group({\r\n      stockSymbol: [''],\r\n      orderType: [''],\r\n      quantity: ['']\r\n    });\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.getStocks();\r\n  }\r\n\r\n  getStocks() {\r\n    const headers = new HttpHeaders().set('X-Api-Key', 'EDIG_Assessment');\r\n\r\n    this.http.get<StocksDetails[]>('http://localhost:7272/stocks', { headers }).subscribe(data => {\r\n      this.stocks = data;\r\n    });\r\n\r\n    this.webSocketService.getMessages().pipe(\r\n      catchError(err => {\r\n        console.error('Error in subscribe:', err);\r\n        return throwError(err);\r\n      })\r\n    ).subscribe((PriceUpdate: StockUpdate) => { // Specify the type of update\r\n      console.log(\"frontend updating\");\r\n      // Find the stock that was updated\r\n      const stock = this.stocks.find(s => s.symbol === PriceUpdate.symbol);\r\n\r\n      if (stock) {\r\n        // Get the previous price from PriceHistories\r\n        const previousPrice = stock.priceHistories[stock.priceHistories.length - 1].price;\r\n\r\n        // Update the current price\r\n        stock.currentPrice = PriceUpdate.price;\r\n\r\n        // Add the new price to PriceHistories\r\n        stock.priceHistories.push({ price: PriceUpdate.price, timeStamp: new Date().toISOString() });\r\n      }\r\n    });\r\n  }\r\n  placeOrder() {\r\n    const order = {\r\n      Symbol: this.form.get('stockSymbol').value,\r\n      Type: this.form.get('orderType').value,\r\n      Quantity: this.form.get('quantity').value\r\n    };\r\n\r\n    this.http.post('http://localhost:7272/order', order).subscribe(response => {\r\n      console.log(response);\r\n    });\r\n  }\r\n\r\n}\r\n\r\nexport interface StocksDetails {\r\n  title: string,\r\n  symbol: string,\r\n  currentPrice: number,\r\n  priceHistories: PriceHistory[]\r\n}\r\n\r\nexport interface PriceHistory {\r\n  price: number,\r\n  timeStamp: string\r\n}\r\nexport interface StockUpdate {\r\n  symbol: string;\r\n  price: number;\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}