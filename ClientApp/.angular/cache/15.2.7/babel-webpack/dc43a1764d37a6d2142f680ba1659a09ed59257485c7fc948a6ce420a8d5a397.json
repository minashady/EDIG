{"ast":null,"code":"import * as signalR from '@aspnet/signalr';\nimport { Subject } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nexport class WebSocketService {\n  constructor() {\n    this.hubConnection = new signalR.HubConnectionBuilder().withUrl('http://localhost:7272/priceUpdateHub').build();\n    this.subject = new Subject();\n    this.hubConnection.start().then(() => {\n      this.hubConnection.on('BroadcastMessage', PriceUpdate => {\n        //const update: StockUpdate = { symbol, price };\n        this.subject.next(PriceUpdate);\n      });\n    }).catch(err => console.error('Error while starting connection: ' + err));\n  }\n  getMessages() {\n    return this.subject.asObservable();\n  }\n}\nWebSocketService.ɵfac = function WebSocketService_Factory(t) {\n  return new (t || WebSocketService)();\n};\nWebSocketService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: WebSocketService,\n  factory: WebSocketService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AACA,OAAO,KAAKA,OAAO,MAAM,iBAAiB;AAC1C,SAASC,OAAO,QAAoB,MAAM;;AAM1C,OAAM,MAAOC,gBAAgB;EAI3BC;IACE,IAAI,CAACC,aAAa,GAAG,IAAIJ,OAAO,CAACK,oBAAoB,EAAE,CACpDC,OAAO,CAAC,sCAAsC,CAAC,CAC/CC,KAAK,EAAE;IAEV,IAAI,CAACC,OAAO,GAAG,IAAIP,OAAO,EAAe;IAEzC,IAAI,CAACG,aAAa,CAACK,KAAK,EAAE,CACvBC,IAAI,CAAC,MAAK;MACT,IAAI,CAACN,aAAa,CAACO,EAAE,CAAC,kBAAkB,EAAGC,WAAW,IAAI;QACxD;QACA,IAAI,CAACJ,OAAO,CAACK,IAAI,CAACD,WAAW,CAAC;MAChC,CAAC,CAAC;IACJ,CAAC,CAAC,CACDE,KAAK,CAACC,GAAG,IAAIC,OAAO,CAACC,KAAK,CAAC,mCAAmC,GAAGF,GAAG,CAAC,CAAC;EAC3E;EAEAG,WAAW;IACT,OAAO,IAAI,CAACV,OAAO,CAACW,YAAY,EAAE;EACpC;;AAvBWjB,gBAAgB;mBAAhBA,gBAAgB;AAAA;AAAhBA,gBAAgB;SAAhBA,gBAAgB;EAAAkB,SAAhBlB,gBAAgB;EAAAmB,YAFf;AAAM","names":["signalR","Subject","WebSocketService","constructor","hubConnection","HubConnectionBuilder","withUrl","build","subject","start","then","on","PriceUpdate","next","catch","err","console","error","getMessages","asObservable","factory","providedIn"],"sourceRoot":"","sources":["W:\\97_Applying\\EDIG\\Stock_Exchange\\Stock_Exchange\\ClientApp\\Services\\webSocket.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport * as signalR from '@aspnet/signalr';\r\nimport { Subject, Observable } from 'rxjs';\r\nimport { StockUpdate } from '../src/app/stocks/stocks.component';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class WebSocketService {\r\n  private hubConnection: signalR.HubConnection;\r\n  private subject: Subject<StockUpdate>;\r\n\r\n  constructor() {\r\n    this.hubConnection = new signalR.HubConnectionBuilder()\r\n      .withUrl('http://localhost:7272/priceUpdateHub')\r\n      .build();\r\n\r\n    this.subject = new Subject<StockUpdate>();\r\n\r\n    this.hubConnection.start()\r\n      .then(() => {\r\n        this.hubConnection.on('BroadcastMessage', (PriceUpdate) => {\r\n          //const update: StockUpdate = { symbol, price };\r\n          this.subject.next(PriceUpdate);\r\n        });\r\n      })\r\n      .catch(err => console.error('Error while starting connection: ' + err));\r\n  }\r\n\r\n  getMessages(): Observable<StockUpdate> {\r\n    return this.subject.asObservable();\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}